<?php

namespace {{ namespace }};

use Illuminate\Database\Eloquent\Builder;
use IndexZer0\EloquentFiltering\Filter\Filterable\ApprovedFilter;
use IndexZer0\EloquentFiltering\Filter\FilterMethods\Abstract\AbstractFieldFilter;
use IndexZer0\EloquentFiltering\Filter\Traits\HasModifiers;
use IndexZer0\EloquentFiltering\Rules\TargetRules;

class {{ class }} extends AbstractFieldFilter
{
    use HasModifiers;

    final public function __construct(
        protected string $target,
        protected mixed  $value,
        protected array  $modifiers
    ) {
    }

    /*
     * The unique identifier of the filter.
     */
    public static function type(): string
    {
        return '${{ type }}';
    }

    /*
     * The format that the filter data must adhere to.
     * Defined as laravel validator rules.
     * On fail: throws MalformedFilterFormatException.
     */
    public static function format(): array
    {
        return [
            ...TargetRules::get(),
            'value'  => ['required'],
        ];
    }

    /*
     * Instantiate filter class from ApprovedFilter.
     */
    public static function from(ApprovedFilter $approvedFilter): static
    {
        return new static(
            $approvedFilter->target()->getReal(),
            $approvedFilter->data_get('value'),
            $approvedFilter->modifiers(),
        );
    }

    /*
     * Apply the filter logic.
     */
    public function apply(Builder $query): Builder
    {
        return $query->where($this->target, $this->value);
    }
}
